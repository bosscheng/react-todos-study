{"ast":null,"code":"import _objectSpread from \"/Users/wancheng/GitHub/react-todos-study/react-todos-es6-class-jsx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/wancheng/GitHub/react-todos-study/react-todos-es6-class-jsx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n* author: wancheng\n* date: 2018-12-19\n* desc:\n*/\n// 不修改原来的 state，而是新增一个新的对象。\nvar todos = function todos() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [].concat(_toConsumableArray(state), [{\n        id: action.id,\n        text: action.text,\n        completed: false\n      }]);\n\n    case 'TOGGLE_TODO':\n      return state.map(function (todo) {\n        return todo.id === action.id ? _objectSpread({}, todo, {\n          completed: !todo.completed\n        }) : todo;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"sources":["/Users/wancheng/GitHub/react-todos-study/react-todos-es6-class-jsx/src/reducers/todos.js"],"names":["todos","state","action","type","id","text","completed","map","todo"],"mappings":";;;AAAA;;;;;AAMA;AACA,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,0CACOF,KADP,IAEI;AACIG,QAAAA,EAAE,EAAEF,MAAM,CAACE,EADf;AAEIC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFjB;AAGIC,QAAAA,SAAS,EAAE;AAHf,OAFJ;;AAQJ,SAAK,aAAL;AACI,aAAOL,KAAK,CAACM,GAAN,CAAU,UAAAC,IAAI,EAAI;AACrB,eAASA,IAAI,CAACJ,EAAL,KAAYF,MAAM,CAACE,EAApB,qBAA8BI,IAA9B;AAAoCF,UAAAA,SAAS,EAAE,CAACE,IAAI,CAACF;AAArD,aAAkEE,IAA1E;AACH,OAFM,CAAP;;AAGJ;AACI,aAAOP,KAAP;AAfR;AAiBH,CAlBD;;AAoBA,eAAeD,KAAf","sourcesContent":["/*\n* author: wancheng\n* date: 2018-12-19\n* desc:\n*/\n\n// 不修改原来的 state，而是新增一个新的对象。\nconst todos = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ];\n        case 'TOGGLE_TODO':\n            return state.map(todo => {\n                return ((todo.id === action.id) ? {...todo, completed: !todo.completed} : todo);\n            });\n        default:\n            return state\n    }\n};\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}